//SPDX-License-Identifier: UNLICENSED

pragma solidity >=0.7.0 <0.9.0;

import "hardhat/console.sol";


contract UserRegistration {

    mapping(string => address) private users;
    mapping(address => string) private addresses;

    modifier userDontExist(string calldata userName){
        require (users[userName] == address(0), "User exists already");
        _;
    }

    modifier addressHasNoUser(address userAddress){
        require(keccak256(abi.encodePacked(addresses[userAddress])) == keccak256(abi.encodePacked("")), "User already has a user name");
        _;
    }

    function registerUser(string calldata userName) public userDontExist(userName) addressHasNoUser(msg.sender) {
        users[userName] = msg.sender;
        addresses[msg.sender] = userName;
    }

    function getUserName(address userAddress) external view returns (string memory) {
        return addresses[userAddress];
    }
}